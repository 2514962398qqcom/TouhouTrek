### YamlMime:ManagedReference
items:
- uid: ZMDFQ.Script`1
  commentId: T:ZMDFQ.Script`1
  id: Script`1
  parent: ZMDFQ
  children:
  - ZMDFQ.Script`1.#ctor(System.String)
  - ZMDFQ.Script`1.run(ZMDFQ.Game,ZMDFQ.PlayerAction.Response)
  langs:
  - csharp
  - vb
  name: Script<T>
  nameWithType: Script<T>
  fullName: ZMDFQ.Script<T>
  type: Class
  source:
    remote:
      path: Assets/Scripts/Scripting/Script.cs
      branch: develop
      repo: https://github.com/a395338563/ZMDFQ.git
    id: Script
    path: Assets/Scripts/Scripting/Script.cs
    startLine: 42
  assemblies:
  - Model
  namespace: ZMDFQ
  summary: "\n带有返回类型的脚本\n"
  example: []
  syntax:
    content: public class Script<T>
    typeParameters:
    - id: T
      description: 脚本在执行的时候的返回类型
    content.vb: Public Class Script(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Script(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: ZMDFQ.Script(Of T)
  name.vb: Script(Of T)
- uid: ZMDFQ.Script`1.#ctor(System.String)
  commentId: M:ZMDFQ.Script`1.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: ZMDFQ.Script`1
  langs:
  - csharp
  - vb
  name: Script(String)
  nameWithType: Script<T>.Script(String)
  fullName: ZMDFQ.Script<T>.Script(System.String)
  type: Constructor
  source:
    remote:
      path: Assets/Scripts/Scripting/Script.cs
      branch: develop
      repo: https://github.com/a395338563/ZMDFQ.git
    id: .ctor
    path: Assets/Scripts/Scripting/Script.cs
    startLine: 49
  assemblies:
  - Model
  namespace: ZMDFQ
  summary: "\n新建脚本\n"
  example: []
  syntax:
    content: public Script(string code)
    parameters:
    - id: code
      type: System.String
      description: 脚本语言代码
    content.vb: Public Sub New(code As String)
  overload: ZMDFQ.Script`1.#ctor*
  nameWithType.vb: Script(Of T).Script(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: ZMDFQ.Script(Of T).Script(System.String)
- uid: ZMDFQ.Script`1.run(ZMDFQ.Game,ZMDFQ.PlayerAction.Response)
  commentId: M:ZMDFQ.Script`1.run(ZMDFQ.Game,ZMDFQ.PlayerAction.Response)
  id: run(ZMDFQ.Game,ZMDFQ.PlayerAction.Response)
  parent: ZMDFQ.Script`1
  langs:
  - csharp
  - vb
  name: run(Game, Response)
  nameWithType: Script<T>.run(Game, Response)
  fullName: ZMDFQ.Script<T>.run(ZMDFQ.Game, ZMDFQ.PlayerAction.Response)
  type: Method
  source:
    remote:
      path: Assets/Scripts/Scripting/Script.cs
      branch: develop
      repo: https://github.com/a395338563/ZMDFQ.git
    id: run
    path: Assets/Scripts/Scripting/Script.cs
    startLine: 60
  assemblies:
  - Model
  namespace: ZMDFQ
  summary: "\n执行脚本\n"
  example: []
  syntax:
    content: public T run(Game game, Response target)
    parameters:
    - id: game
      type: ZMDFQ.Game
      description: 游戏参数
    - id: target
      type: ZMDFQ.PlayerAction.Response
      description: 目标参数
    return:
      type: '{T}'
      description: 返回脚本执行的返回值
    content.vb: Public Function run(game As Game, target As Response) As T
  overload: ZMDFQ.Script`1.run*
  nameWithType.vb: Script(Of T).run(Game, Response)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: ZMDFQ.Script(Of T).run(ZMDFQ.Game, ZMDFQ.PlayerAction.Response)
references:
- uid: ZMDFQ
  commentId: N:ZMDFQ
  name: ZMDFQ
  nameWithType: ZMDFQ
  fullName: ZMDFQ
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: ZMDFQ.Script`1.#ctor*
  commentId: Overload:ZMDFQ.Script`1.#ctor
  name: Script
  nameWithType: Script<T>.Script
  fullName: ZMDFQ.Script<T>.Script
  nameWithType.vb: Script(Of T).Script
  fullName.vb: ZMDFQ.Script(Of T).Script
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: ZMDFQ.Script`1.run*
  commentId: Overload:ZMDFQ.Script`1.run
  name: run
  nameWithType: Script<T>.run
  fullName: ZMDFQ.Script<T>.run
  nameWithType.vb: Script(Of T).run
  fullName.vb: ZMDFQ.Script(Of T).run
- uid: ZMDFQ.Game
  commentId: T:ZMDFQ.Game
  parent: ZMDFQ
  name: Game
  nameWithType: Game
  fullName: ZMDFQ.Game
- uid: ZMDFQ.PlayerAction.Response
  commentId: T:ZMDFQ.PlayerAction.Response
  parent: ZMDFQ.PlayerAction
  name: Response
  nameWithType: Response
  fullName: ZMDFQ.PlayerAction.Response
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: ZMDFQ.PlayerAction
  commentId: N:ZMDFQ.PlayerAction
  name: ZMDFQ.PlayerAction
  nameWithType: ZMDFQ.PlayerAction
  fullName: ZMDFQ.PlayerAction
- uid: T
  name: T
  nameWithType: T
  fullName: T
